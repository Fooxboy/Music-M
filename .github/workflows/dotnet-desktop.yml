# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: WinUI 3 MSIX app


on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x86, x64, ARM64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: "VK UI3 (Package)"                         # Replace with your solution name, i.e. App1.sln.

    steps:


    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        node-version: 16
        fetch-depth: 0

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)



    - name: Display disk tree
      run: |
        Get-ChildItem -Recurse | Sort-Object Length -Descending




    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}


    - name: Print working directory
      run: |
        Write-Host "Current working directory: $(Get-Location)"

    - name: Get Certificate Thumbprint and Replace in Project File
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
        $pfxPassword = ConvertTo-SecureString -String "${{ secrets.PFX_PASSWORD }}" -AsPlainText -Force
        $pfxCert = Get-PfxCertificate -FilePath $certificatePath -Password $pfxPassword
        Write-Host "Certificate Thumbprint: $($pfxCert.Thumbprint)"
    
        $projectFile = "VK UI3 (Package)/VK UI3 (Package).wapproj"
        $content = Get-Content -Path $projectFile -Raw
        $content = $content -replace '(?<=<PackageCertificateThumbprint>).+?(?=</PackageCertificateThumbprint>)', $pfxCert.Thumbprint
        Set-Content -Path $projectFile -Value $content

    - name: Install PFX certificate
      run: |
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        $password = ConvertTo-SecureString -String "${{ secrets.PFX_PASSWORD }}" -Force -AsPlainText
        Import-PfxCertificate -FilePath $certificatePath -CertStoreLocation Cert:\LocalMachine\My -Password $password



    # Create the app package by building and packaging the project
    - name: Create the app package
      run: |
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile="$certificatePath" /p:PackageCertificatePassword="${{ secrets.PFX_PASSWORD }}" /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true      
      env:
        Appx_Bundle: Always
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

        
    # Remove the pfx
    - name: Remove the pfx
      run: |
        $certificatePath = "${{ github.workspace }}\GitHubActionsWorkflow.pfx"
        Remove-Item -path "$certificatePath"
        
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Solution_Name }}\\Packages
    
    - name: Upload .cer, .msixbundle, and .msix files
      uses: actions/upload-artifact@v2
      with:
        name: Release Files
        path: |
          *.cer
          *.msixbundle
          *.msix
    
    # Извлечение версии из Package.appxmanifest
    - name: Извлечь версию
      id: get_version
      run: |
        $xml = xml
        $ns = @{default='http://schemas.microsoft.com/appx/manifest/foundation/windows10'}
        $version = $xml.SelectSingleNode('//default:Identity', $ns).Version
        echo "VERSION=$version" >> $GITHUB_ENV
    
    # Проверка наличия релиза
    - name: Проверить релиз
      id: check_release
      run: |
        if curl --silent --head --fail "https://github.com/$GITHUB_REPOSITORY/releases/tag/${{ env.VERSION }}"; then
          echo "RELEASE_EXISTS=1" >> $GITHUB_ENV
        else
          echo "RELEASE_EXISTS=0" >> $GITHUB_ENV
        fi
    
    # Создание нового релиза, если он еще не существует
    - name: Создать релиз
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: AutoBuild
        draft: false
        prerelease: true
      if: env.RELEASE_EXISTS == 0

    
    

















  winforms_build:  # Новая задача для сборки проекта Windows Forms

    strategy:
      matrix:
        configuration: [Release]
        platform: [Any CPU]

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Установка .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Добавление MSBuild в PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $pfxPassword = "${{ secrets.PFX_PASSWORD }}"
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
    # Восстановление приложения для заполнения папки obj с RuntimeIdentifiers
    - name: Restore the application
      run: dotnet restore $env:Solution_Name
      env:
        Configuration: ${{ matrix.configuration }}
    
    - name: Build Windows Forms project
      run: |
        $certThumbprint = $pfxcert.Thumbprint
        dotnet publish $env:Solution_Name --configuration $env:Configuration --runtime win10-x64 --output ./publish /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$pfxPath /p:Thumbprint=$certThumbprint /p:Password=$pfxPassword
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
