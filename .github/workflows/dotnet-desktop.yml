# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.


name: WinUI 3 MSIX app


on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x86, x64, ARM64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: "VK UI3 (Package)"                         # Replace with your solution name, i.e. App1.sln.

    steps:


    
    - name: Checkout
      uses: actions/checkout@v2
      with:
        node-version: 16
        fetch-depth: 0

    - name: Check if certificate exists
      run: |
        $certificatePath = "GitHubActionsWorkflow.pfx"
        if (Test-Path $certificatePath) {
          Write-Host "Certificate exists at $certificatePath"
        } else {
          Write-Host "Certificate does not exist at $certificatePath"
        }






    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}


    - name: Print working directory
      run: |
        Write-Host "Current working directory: $(Get-Location)"

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
    - name: Decrypt the pfx
      run: |
        $cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2 ($certificatePath)

    - name: Save the decrypted certificate
      run: |
        $cert.Export('Cert') | Set-Content -Path $certificatePath


    # Create the app package by building and packaging the project
    - name: Create the app package
      run: |
        msbuild ${{ env.Solution_Name }} /p:Configuration=${{ env.Configuration }} /p:Platform=${{ env.Platform }} /p:UapAppxPackageBuildMode=${{ env.Appx_Package_Build_Mode }} /p:AppxBundle=${{ env.Appx_Bundle }} /p:PackageCertificateKeyFile=$(cat certificatePath.txt) /p:AppxPackageDir="${{ env.Appx_Package_Dir }}" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Always  # Changed from 'Never' to 'Always'
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    

    
    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx
    
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload MSIX package
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Solution_Name }}\\Packages
    
    - name: Upload .cer, .msixbundle, and .msix files
      uses: actions/upload-artifact@v2
      with:
        name: Release Files
        path: |
          *.cer
          *.msixbundle
          *.msix
    
    # Extract version from Package.appxmanifest
    - name: Extract version
      id: get_version
      run: |
        $xml = xml/Package.appxmanifest)
        $ns = @{default='http://schemas.microsoft.com/appx/manifest/foundation/windows10'}
        $version = $xml.SelectSingleNode('//default:Identity', $ns).Version
        echo "VERSION=$version" >> $GITHUB_ENV
    
    # Create a new release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: AutoBuild
        draft: false
        prerelease: true





















  winforms_build:  # Новая задача для сборки проекта Windows Forms

    strategy:
      matrix:
        configuration: [Release]
        platform: [Any CPU]

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Установка .NET Core
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Добавление MSBuild в PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
    - name: Decrypt the pfx
      run: |
        $cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2 ($certificatePath)

    # Восстановление приложения для заполнения папки obj с RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Сборка проекта Windows Forms
    - name: Build Windows Forms project
      run: |
        $certThumbprint = $cert.Thumbprint
        msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$pfxPath /p:Thumbprint=$certThumbprint
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

